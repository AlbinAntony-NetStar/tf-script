pipeline {
agent any
tools {
  terraform 'terraform'
}
parameters { 
  choice(choices: ['plan', 'plan&apply', 'destroy-plan', 'destroy'], description: 'Please Select the Action', name: 'Action')
  string(defaultValue: 'dev-ecr-1', name: 'Name' ,description: 'Please Enter the name for ECR')
}
 stages { 
   stage ('Checkout Repo & TF init') { 
     steps { 
       cleanWs()
       sh  '''
       git clone https://github.com/AlbinAntony-NetStar/tf-script.git
       cd tf-script/S3/
       terraform init
       '''
      }
      } 
 stage ('TF plan') { 
   when { expression { return env.Action == 'plan' && env.Action == 'plan&apply' } }
   steps {
   sh '''
   cd tf-script/S3/
   terraform plan  -var bucket_name=${Name} -out=tfplan.out
   ''' 
   }
   }
stage('TF Apply') {
    // only execute stage if apply is desired
    when { expression { return env.Action == 'plan&apply' } }
    steps {
      // query for user approval of plan
      input(message: 'Click "proceed" to approve the above Terraform Plan')
      // apply the plan if approved
    sh '''
    cd tf-script/S3/
    terraform apply "tfplan.out"
    aws s3 cp terraform.tfstate s3://tf-al/S3/${Name}/terraform.tfstate
    ''' 
    }

        }
stage('TF Destroy Plan') {
    // only execute stage if apply is desired
    when { expression { return env.Action == 'destroy-plan' } }
    steps {
    sh '''
    cd tf-script/S3/
    aws s3 cp s3://tf-al/S3/${Name}/terraform.tfstate .
    terraform plan -destroy
    ''' 
    }

        }

stage('TF Destroy') {
    // only execute stage if apply is desired
    when { expression { return env.Action == 'destroy' } }
    steps {
      // query for user approval of plan
      input(message: 'Click "proceed" to approve the above Terraform Plan')
      // apply the plan if approved
    sh '''
    cd tf-script/S3/
    aws s3 cp s3://tf-al/S3/${Name}/terraform.tfstate .
    terraform destroy --auto-approve
    ''' 
    }

        }
 }
}