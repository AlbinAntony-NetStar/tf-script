pipeline {
agent any
tools {
  terraform 'terraform'
}
parameters {
  string(name: 'Action', description: 'Terraform module to act upon.')
}
 stages { 
   stage ('Checkout Repo') { 
     steps { 
       cleanWs()
       sh  'git clone https://github.com/AlbinAntony-NetStar/tf-script.git'
      }
      } 

stage ('Terraform version') { 
  steps {
   sh '''
    terraform --version
   ''' 
    }
    }
stage ('Terraform init') { 
  steps {
   sh '''
   cd tf-script/ECR/dev-ecr/
   terraform init
   ''' 
   }
   }
 stage ('Terraform plan') { 
  steps {
   sh '''
   cd tf-script/ECR/dev-ecr/
   terraform plan -out=tfplan.out
   ''' 
   }
   }
stage('TF Apply') {
    // only execute stage if apply is desired
    when { expression { return env.Action == 'apply' } }
    steps {
      // query for user approval of plan
      input(message: 'Click "proceed" to approve the above Terraform Plan')
      // apply the plan if approved
    sh '''
    cd tf-script/ECR/dev-ecr/
    terraform apply "tfplan.out"
    ''' 
    }

        }
stage ('Terraform Destroy Output') { 
  steps {
   sh '''
   cd tf-script/ECR/dev-ecr/
   terraform plan -destroy
   ''' 
   }
   }

stage('TF Destroy') {
    // only execute stage if apply is desired
    when { expression { return env.Action == 'destroy' } }
    steps {
      // query for user approval of plan
      input(message: 'Click "proceed" to approve the above Terraform Plan')
      // apply the plan if approved
    sh '''
    cd tf-script/ECR/dev-ecr/
    terraform destroy --auto-approve
    ''' 
    }

        }
 }
}